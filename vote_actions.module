<?php
// $Id: vote_actions.module,v 1.1 2007/06/29 00:59:16 frjo Exp $

/* TODO FormAPI image buttons are now supported.
   FormAPI now offers the 'image_button' element type, allowing developers to
   use icons or other custom images in place of traditional HTML submit buttons.

$form['my_image_button'] = array(
  '#type'         => 'image_button',
  '#title'        => t('My button'),
  '#return_value' => 'my_data',
  '#src'          => 'my/image/path.jpg',
); */

/* TODO New user_mail_tokens() method may be useful.
   user.module now provides a user_mail_tokens() function to return an array
   of the tokens available for the email notification messages it sends when
   accounts are created, activated, blocked, etc. Contributed modules that
   wish to make use of the same tokens for their own needs are encouraged
   to use this function. */

/* TODO
   There is a new hook_watchdog in core. This means that contributed modules
   can implement hook_watchdog to log Drupal events to custom destinations.
   Two core modules are included, dblog.module (formerly known as watchdog.module),
   and syslog.module. Other modules in contrib include an emaillog.module,
   included in the logging_alerts module. See syslog or emaillog for an
   example on how to implement hook_watchdog.
function example_watchdog($log = array()) {
  if ($log['severity'] == WATCHDOG_ALERT) {
    mysms_send($log['user']->uid,
      $log['type'],
      $log['message'],
      $log['variables'],
      $log['severity'],
      $log['referer'],
      $log['ip'],
      format_date($log['timestamp']));
  }
} */

/* TODO Implement the hook_theme registry. Combine all theme registry entries
   into one hook_theme function in each corresponding module file.
function vote_actions_theme() {
  return array(
  );
} */

/**
 * Lets users directly control the votingapi's integration with the actions module.
 */
 
/**
 * Implementation of hook_settings().
 */
function vote_actions_admin_settings() {

  $form['vote_actions_promote'] = array(
    '#type' => 'textfield',
    '#title' => t('Votes to promote to front page'),
    '#default_value' => variable_get('vote_actions_promote', 0),
    '#size' => 10,
    '#description' => t('The vote sum that will promote a post to the front page.'),
  );

  $form['vote_actions_unpromote'] = array(
    '#type' => 'textfield',
    '#title' => t('Votes to remove from front page'),
    '#default_value' => variable_get('vote_actions_unpromote', 0),
    '#size' => 10,
    '#description' => t('The vote sum that will remove a post from the front page.'),
  );

  $form['vote_actions_unpublish'] = array(
    '#type' => 'textfield',
    '#title' => t('Votes to unpublish from site'),
    '#default_value' => variable_get('vote_actions_unpublish', 0),
    '#size' => 10,
    '#description' => t('The vote sum that will unpublish a post to the site.'),
  );

  return system_settings_form($form);
}

/*
 * Implementation of hook_menu()
 */
function vote_actions_menu() {
  $items = array();

/* TODO
   Non menu code that was placed in hook_menu under the '!$may_cache' block
   so that it could be run during initialization, should now be moved to hook_init.
   Previously we called hook_init twice, once early in the bootstrap process, second
   just after the bootstrap has finished. The first instance is now called boot
   instead of init.
   
   In Drupal 6, there are now two hooks that can be used by modules to execute code
   at the beginning of a page request. hook_boot() replaces hook_boot() in Drupal 5
   and runs on each page request, even for cached pages. hook_boot() now only runs
   for non-cached pages and thus can be used for code that was previously placed in
   hook_menu() with $may_cache = FALSE:
   
   Dynamic menu items under a '!$may_cache' block can often be simplified
   to remove references to arg(n) and use of '%<function-name>' to check
   conditions. See http://drupal.org/node/103114.
   
   The title and description arguments should not have strings wrapped in t(),
   because translation of these happen in a later stage in the menu system.
*/
  $items['admin/settings/voteactions'] = array(
    'title' => 'Vote actions',
    'description' => 'Vote-driven triggers and actions for your site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vote_actions_admin_settings'),
    'access callback' => 'user_access', 
    'access arguments' => array('administer up-down vote'),
    'type' => MENU_NORMAL_ITEM
  );

  return $items;
}

/*
 * Implementation of hook_votingapi_results()
 *
 * Called by the Voting API whenever a result is calculated.
 */
function vote_actions_votingapi_results($cached, $content_type, $content_id) {
  $content = node_load($content_id);

  if ($content_type != 'node' || $content == null) {
    return;
  }

  foreach ($cached as $tag => $types) {
    if (isset($types['value_type']) && $types['function'] == 'sum') {
      $sum = $types['value'];

      if ($sum >= variable_get('vote_actions_promote', 0)/* && !$content->promote*/) {
        $actions = array('node_promote_action', 'node_save_action', 'action_vote_up_down_userpoints_add');
        actions_do($actions, $content);
      }
      if ($sum <= variable_get('vote_actions_unpromote', 0)/* && $content->promote*/) {
        $actions = array('node_unpromote_action', 'node_save_action', 'action_vote_up_down_userpoints_remove');
        actions_do($actions, $content);
      }
      if ($sum <= variable_get('vote_actions_unpublish', 0)/* && $content->status*/) {
        $actions = array('node_unpublish_action', 'node_save_action');
        actions_do($actions, $content);
      }
    }
  }
}

